name: Build HTML on merge

on:
  pull_request_target:
    types: [closed]
    paths:
      - '**.ipynb'

env:
  CASJOBS_PW: ${{ secrets.CASJOBS_PW }}
  CASJOBS_USERID: ${{ secrets.CASJOBS_USERID }}
jobs:
  prepare_matrix:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
          ref: ${{ github.event.pull_request.head.sha }}

      - id: set-matrix
        run: |
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} '*.ipynb')
          #files_json=$(echo $files | jq -R -s -c 'split("\n")[:-1]')
          files_json=$(echo "$files" | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=matrix::${files_json}"

  execute-notebooks:
    if: github.event.pull_request.merged == true
    needs: prepare_matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        notebooks: ${{fromJson(needs.prepare_matrix.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
            
      - name: Set up micromamba and install dependencies
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: hstcal
          create-args: >-
            -c conda-forge
            python=${{ vars.PYTHON_VERSION }}
            setuptools=65.5.1
            numpy=1.26.0
            hstcal
            jupyter
            pytest
            nbval
            nbconvert
            bandit

      
      - name: Set up Python ${{ vars.PYTHON_VERSION }}
        uses: astral-sh/setup-uv@v6.0.1
        with:
          version: "0.7.3"
          python-version: ${{ vars.PYTHON_VERSION }}
          enable-cache: true
      
      - name: Install dependencies
        env:
          PYDEVD_DISABLE_FILE_VALIDATION: 1
          SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL: True
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          
          # Verify numpy version (for debugging)
          python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
          
          echo "Path to req's: $(dirname ${{ matrix.notebooks }})/requirements.txt"
          ls $(dirname ${{ matrix.notebooks }})
          echo ---
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-installl.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-install.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-install.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh ]; then
            chmod +x $(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
            ./$(dirname "${{ matrix.notebooks }}")/pre-requirements.sh
          fi
          if [ -f $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt ]; then
            uv pip install --system --no-build-isolation -r $(dirname "${{ matrix.notebooks }}")/pre-requirements.txt
          fi
          if [ -f $(dirname ${{ matrix.notebooks }})/requirements.txt ]; then
            uv pip install --system --no-build-isolation -r $(dirname ${{ matrix.notebooks }})/requirements.txt
          fi         
          
          uv pip install --system pytest
          uv pip install --system nbval
          uv pip install --system nbconvert
          uv pip install --system bandit


      - name: Execute notebooks
        id: execute
        run: |
          eval "$(micromamba shell hook -s posix)"
          micromamba activate hstcal
          if ! jupyter nbconvert --to notebook --execute --inplace ${{ matrix.notebooks }}; then
            python .github/scripts/insert_failure_message.py ${{ matrix.notebooks }}
          fi
          
      - name: Commit modified file on current branch
        run: |
          git config user.name 'CI Bot'
          git config user.email 'action@github.com'
          git add "${{ matrix.notebooks }}"
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

      - name: Checkout only the file to the target branch
        run: |
          git fetch
          git pull
          git checkout -f gh-storage
          git checkout @{-1} "${{ matrix.notebooks }}"

      - name: Commit and push modifications to target branch
        run: |
          git commit -m "Storing executed notebook ${{ matrix.notebooks }}"

          MAX_RETRIES=5
          RETRY_DELAY=10s
          for i in $(seq 1 $MAX_RETRIES); do
            git push origin gh-storage --force && break || {
              echo "Push $i failed... waiting $RETRY_DELAY"
              sleep $RETRY_DELAY
            }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  generate_html:
    if: github.event.pull_request.merged == true
    needs: execute-notebooks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python  ${{ vars.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version:  ${{ vars.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install ghp-import
        pip install jupyter-book==v0.15.1
        pip install myst-nb
        pip install astroid
        pip install nbval
        #pip install bs4
        #pip install lxml
        ## test to bypass the jupyter-book lower version
        pip install jsonschema==4.6.0
        PATH="${PATH}:${HOME}/.local/bin"

    - name: Build HTML
      run: |
        git fetch
        git checkout origin/gh-storage -- notebooks/
        jupyter-book build .

    # Push the book's HTML to github-pages
    - name: GitHub Pages action
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./_build/html
